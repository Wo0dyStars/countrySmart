(()=>{"use strict";const e={activeCountry:{fillColor:"#2C5364",fillOpacity:.1,color:"#2C5364",weight:10,dashArray:3,opacity:.8},inactiveCountry:{fillColor:"#fff",weight:1,opacity:.1,color:"white",dashArray:3,fillOpacity:.1},highlightedCountry:{weight:10,color:"#2C5364",opacity:.5,dashArray:"",fillOpacity:.7}},t=(e,t,o)=>{$.ajax({url:o,type:"POST",dataType:"json",data:e,success:t,error:e=>{console.log("The following error occurred: ",e)}})},o={lines:13,length:0,width:23,radius:61,scale:1.2,speed:1.1,rotate:63,animation:"spinner-line-shrink",color:"#155799"},n=e=>e>1e6?{name:"orange",color:"#CB8427",index:5,markerCode:"orange"}:e>5e5?{name:"blue",color:"#2A81CB",index:4,markerCode:"yellow"}:e>1e5?{name:"green",color:"#2AAD27",index:3,markerCode:"green"}:e>5e4?{name:"violet",color:"#9C2BCB",index:2,markerCode:"violet"}:e>2e4?{name:"red",color:"#FF0000",index:1,markerCode:"red"}:{name:"black",color:"#3D3D3D",index:0,markerCode:"black"},r={styles:{},selectCountry:{},selectedCountryCode:"",highlightFeature:e=>{e.target.feature.properties.iso_a2!==r.selectedCountryCode&&(e.target.setStyle(r.styles.highlightedCountry),L.Browser.ie||L.Browser.opera||L.Browser.edge||e.target.bringToFront())},resetHighlight:e=>{e.target.setStyle(r.styles.inactiveCountry)},ActivateCountry:e=>{$.getJSON("js/external/countryBorders.geo.json",(t=>{r.selectedCountryCode=e.target.feature.properties.iso_a2,r.selectCountry(e.target.feature.properties.iso_a2,t)}))},onEachFeature:(e,t)=>{t.on({mouseover:r.highlightFeature,mouseout:r.resetHighlight,click:r.ActivateCountry})},hoverOnCountry:(e,t)=>{L.geoJson(e,{style:r.styles.inactiveCountry,onEachFeature:r.onEachFeature}).addTo(t)}},a=e=>{$("#bar-chart").remove(),$(".bar-container").append('<canvas id="bar-chart" width="800" height="400"></canvas>'),Chart.defaults.global.defaultFontColor=" #203a43",Chart.Legend.prototype.afterFit=function(){this.height=this.height+50},console.log(e),new Chart($("#bar-chart"),{type:"bar",data:{labels:["0-20K","20K-50K","50K-100K","100K-500K","500K-1M","1M+"],datasets:[{label:"Population",backgroundColor:["#3D3D3D","#CB2B3E","#9C2BCB","#2AAD27","#2A81CB","#CB8427"],data:[e[0],e[1],e[2],e[3],e[4],e[5]]}]},options:{responsive:!0,legend:{display:!1}}})},i=(e,t,o)=>{const n=e.weather[0].icon,r={visibility:e.visibility,localTime:new Date(1e3*e.dt+1e3*t),weatherIconImage:`http://openweathermap.org/img/wn/${n}@2x.png`,weatherDescription:e.weather[0].description,windSpeed:e.wind_speed,windDegree:e.wind_deg,feelsLike:Math.round(parseFloat(e.feels_like)-273.15),humidity:e.humidity,pressure:e.pressure,temperature:Math.round(parseFloat(e.temp)-273.15)};return o&&(r.sunRise=new Date(1e3*e.sunrise),r.sunSet=new Date(1e3*e.sunset)),r},s=(e,t)=>{const o=i(e.current,e.timezone_offset,!0);let n="";for(let t=0;t<24;t++){const o=i(e.hourly[t],e.timezone_offset,!1);n+=`\n            <div>\n                <div>${moment(o.localTime).format("HH:mm")}</div>\n                <div><img src="${o.weatherIconImage}" /></div>\n                <div>${o.temperature}&#176;</div>\n            </div>\n        `}$(".weather-data").append(`\n        <div id="weather">\n            <div class="weather-line">\n                <div class="weather-group">\n                    <h2>${t}</h2>\n                    <h1 class="weather-temperature">${o.temperature}&#176;</h1>\n                </div>\n\n                <div class="weather-group">\n                    <img src="${o.weatherIconImage}" />\n                    <span>${o.weatherDescription}</span>\n                </div>\n            </div>\n\n            <div id="weather-forecast">\n                ${n}\n            </div>\n            \n            <div class="weather-description">\n                <h4>${moment(o.localTime).format("ddd, MMM, YYYY")}</h4>\n                <div>Sunrise: ${moment(o.sunRise).format("HH:mm")}</div>\n                <div>Sunset: ${moment(o.sunSet).format("HH:mm")}</div>\n                <hr>\n                <div class="weather-minors">\n                    <div>Wind: ${o.windSpeed} m/s, ${o.windDegree}&#176;</div>\n                    <div>Visibility: ${o.visibility} m</div>\n                    <div>Feels like: ${o.feelsLike}&#176;</div>\n                    <div>Humidity: ${o.humidity}%</div>\n                    <div>Pressure: ${o.pressure} hPa</div>\n                </div>\n            </div>\n        </div>\n    `)},l=e=>{const{name:t,capital:o,flag:n,area:r,population:a}=e,i=`\n            <article>\n                <h4>${t}</h4>\n                <ul>\n                    <li>Capital city: ${o}</li>\n                    <li class="medium-flag">\n                        <img src="${n}" alt="${t} national flag" />\n                    </li>\n                    <li>Area: ${r} km<sup>2</sup></li>\n                    <li>Population: ${(e=>`~ ${e/1e6}M`)(a)}</li>\n                </ul>\n            </article>\n    `;return $(".background").css("background",`url("${n}") no-repeat center/cover`),i},d=e=>`<article><h4>${e.name}</h4></article>`,p=e=>{const{name:t,flag:o}=e;return`\n        <span class="country-name">${t}</span>\n        <img class="country-flag" src="${o}" alt="${t} national flag" />\n    `};$.getJSON("js/external/countryBorders.geo.json",(e=>{const t=e.features.map((e=>e.properties.name)).sort();for(let o=0;o<t.length;o++){const n=e.features.filter((e=>e.properties.name===t[o]))[0],r=n.properties.name+" ("+n.properties.iso_a2+")";$("#countries").append($("<option></option>").val(n.properties.iso_a2).html(r))}}));let u="",c={},h={},m={},g="";t({purpose:"RestCountries"},(e=>{g=e}),"php/request.php"),$(document).ready((()=>{navigator.userAgent.match(/iPhone/i)||navigator.userAgent.match(/iPod/i)?$(".button").on("mouseup",(function(){$(".modal-wrapper").toggleClass("show hide"),$(this).toggleClass("animated")})):$(".button").on("click",(function(){$(".modal-wrapper").toggleClass("show hide"),$(this).toggleClass("animated")})),$((function(){$("#dialog").dialog()}))}));const y=L.map("countryMap",{minZoom:3,maxZoom:15,maxBounds:[[-90,-180],[90,180]]});L.tileLayer("https://{s}.tile.openstreetmap.fr/osmfr/{z}/{x}/{y}.png",{attribution:'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, <a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery Â© <a href="https://www.mapbox.com/">Mapbox</a>',maxZoom:18}).addTo(y);const v=()=>{$("#dialog").html("I was unable to detect your location on your device. I will assume that your are from England."),f(55,-3)};y.on("locationerror",(()=>{navigator.geolocation?navigator.geolocation.getCurrentPosition((e=>{L.marker(e.coords.latitude).addTo(y).bindPopup("This is your location here."),L.circle(e.coords.longitude,5e4).addTo(y),f(e.coords.latitude,e.coords.longitude)}),(e=>{v()})):v()})),y.on("locationfound",(e=>{L.marker(e.latlng,{icon:L.ExtraMarkers.icon({markerColor:"violet",shape:"penta"})}).addTo(y).bindPopup("This is your location here."),L.circle(e.latlng,5e4).addTo(y),f(e.latitude,e.longitude)})),y.locate({setView:!0,maxZoom:16});const f=(o,n)=>{t({latitude:o,longitude:n,purpose:"getLocalCountry",APIKey:"63b9294f9ed64bdeb0c77b390070e3a2"},(t=>{u=t.results[0].components["ISO_3166-1_alpha-2"],$("#dialog").html(`\n            <div>\n                <div><span class="dialog-text">Continent</span>: ${t.results[0].components.continent}</div>\n                <div><span class="dialog-text">Country</span>: ${t.results[0].components.country}</div>\n                <div><span class="dialog-text">County</span>: ${t.results[0].components.county}</div>\n                <div><span class="dialog-text">City</span>: ${t.results[0].components.city}</div>\n            </div>\n        `),$.getJSON("js/external/countryBorders.geo.json",(t=>{r.styles=e,r.selectCountry=C,r.selectedCountryCode=u,r.hoverOnCountry(t,y),C(u,t)}))}),"php/request.php")};$("#countries").on("change",(function(){u=$(this).val(),$.getJSON("js/external/countryBorders.geo.json",(e=>{C(u,e)}))}));const C=(n,r)=>{null!=h&&y.removeLayer(h),null!=c&&y.removeLayer(c),h=L.geoJSON(r,{filter:e=>e.properties.iso_a2===n,style:e.activeCountry}),h.addTo(y),y.fitBounds(h.getBounds(),{padding:[50,50]}),_.update(n),$("#countries").val(n);const a=r.features.filter((e=>e.properties.iso_a2===n))[0].properties.name;x(a),y.spin(!0,o),t({countryCode:n,purpose:"receiveCountryCode"},w,"php/request.php")},w=e=>{const o=e.results[0].objectId;t({countryCode:o,purpose:"createMarkers"},b,"php/request.php")};function b(e){y.spin(!1),null!=c&&y.removeLayer(c),null!=m&&y.removeLayer(m);const t=L.ExtraMarkers.icon({markerColor:"orange",shape:"star"}),o={},r={0:0,1:0,2:0,3:0,4:0,5:0};o[n(e.results[0].population).name]=1,r[n(e.results[0].population).index]=1,m=L.marker(new L.latLng(e.results[0].location.latitude,e.results[0].location.longitude),{icon:t}),c=L.markerClusterGroup();for(let t=1;t<e.results.length;t++){const a=e.results[t].location.latitude,i=e.results[t].location.longitude,s=`\n            <div>\n                <strong>City name:</strong> ${e.results[t].name} <br>\n                <strong>Population:</strong> ${e.results[t].population} people\n            </div>\n        `,l=n(e.results[t].population).index;r[l]?r[l]+=1:r[l]=1;const d=n(e.results[t].population).name;o[d]?o[d]+=1:o[d]=1;const p=L.ExtraMarkers.icon({markerColor:n(e.results[t].population).markerCode,shape:"square"}),u=L.marker(new L.latLng(a,i),{icon:p}).bindPopup(s);c.addLayer(u)}const i={};for(let t=0;t<5;t++)i[t]={city:e.results[t].name,lat:e.results[t].location.latitude,lng:e.results[t].location.longitude};k(i),a(r),M.update(o),y.addLayer(c),m.addTo(y).bindPopup(`\n        <div>\n            <h4>This is the largest city</h4>\n            <strong>City name:</strong> ${e.results[0].name} <br>\n            <strong>Population:</strong> ${e.results[0].population} people\n        </div>\n    `).openPopup()}const k=e=>{if(e){T(e[0].lat,e[0].lng),$(".weather-data").empty();for(let n=0;n<Object.keys(e).length;n++){const r=`api.openweathermap.org/data/2.5/onecall?lat=${e[n].lat}&lon=${e[n].lng}&appid=4d942565fae22651786edb5a63d30836`;y.spin(!0,o),t({URL:r,purpose:"OpenWeatherAPI"},(t=>{y.spin(!1),s(t,e[n].city)}),"php/request.php")}}},x=e=>{t({URL:`https://pixabay.com/api/?key=18817274-cb5f9ebbd5485d83091737054&q=${e}&image_type=photo`,purpose:"pixabayAPI"},(e=>(e=>{let t="",o=0;const n=[];for(;o<10&&o<e.hits.length;){const r=Math.floor(Math.random()*e.hits.length);n.includes(r)||(t+=`\n                <div>\n                    <figure>\n                        <img src="${e.hits[o].webformatURL}" />\n                        <figcaption>${e.hits[o].tags}</figcaption>\n                    </figure>\n                </div>\n            `,n.push(r)),o++}$("#photos").html(t)})(e)),"php/request.php")},T=(e,o)=>{t({URL:`http://api.geonames.org/findNearbyWikipediaJSON?lat=${e}&lng=${o}&username=wo0dystars`,purpose:"wikipediaAPI"},(e=>(e=>{let t="";for(let o=0;o<Object.keys(e.geonames).length;o++)t+=`\n            <details id="wikidata" open>\n                <summary>${e.geonames[o].title}</summary>\n                <div class="wikidata-summary">${e.geonames[o].summary}</div>\n                <div class="wikidata-link"><a href="http://${e.geonames[o].wikipediaUrl}" target="_blank">You can find more information here.</a></div>\n            </details>\n        `;$("#wikipedia").html(`\n        ${t}\n    `)})(e)),"php/request.php")},_=L.control({position:"bottomright"});_.onAdd=function(e){return this._div=L.DomUtil.create("div","countryInformation"),this.update(u),this._div},_.update=function(e){let o="";e&&(g?(o=g.filter((t=>t.alpha2Code===e))[0],this._div.innerHTML=l(o),$("#modal-content").html(d(o)),$(".countryInfo-mobile").html(p(o)),$(".country-flag").html(`<img src="${o.flag}" />`)):t({countryCode:e,purpose:"RestCountries"},(e=>{e?(this._div.innerHTML=l(e),$("#modal-content").html(d(e)),$(".countryInfo-mobile").html(p(e)),$(".country-flag").html(`<img src="${e.flag}" />`)):alert("There is a problem with RestCountries API server. Please try again later!")}),"php/request.php"))},_.addTo(y);const M=L.control({position:"topright"});M.onAdd=function(e){return this._div=L.DomUtil.create("div","countryInformation legend legend-mobile"),this.update(),this._div},M.update=function(e={}){const t=[0,2e4,5e4,1e5,5e5,1e6],o=[0,"20K","50K","100K","500K","1M"];this._div.innerHTML="<h4>Populations</h4>";for(let r=0;r<t.length;r++){const{color:a,name:i}=n(t[r]+1),s=e[i]?" ("+e[i]+") <br>":" (0) <br>",l=t[r+1]?" - "+o[r+1]:"+ ";this._div.innerHTML+=`\n            <div class="legend-line">\n                <i style="background: ${a}"></i>\n                ${o[r]+l+"<strong>"+s+"</strong>"}\n            </div>\n        `}},M.addTo(y)})();